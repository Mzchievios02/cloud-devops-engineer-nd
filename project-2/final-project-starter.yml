Parameters:

    EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String
    S3ReadOnlyAccessARN:
      Description: ARN for the AWS managed S3 Read Only Access policy
      Type: String


Resources:
  s3Bucket:
    Type: AWS::S3::Bucket
    Description: Bucket to store the apps archive


  MyEC2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0022f774911c1d690"
      InstanceType: t2.micro
      KeyName: "pro2"
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      BlockDeviceMappings: 
        - DeviceName: "/dev/sdm"
          Ebs: 
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            VolumeSize: "10"
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: ec2-instance-profile-for-app
      Roles:
        - Ref: UdacityS3ReadOnlyEC2
  UdacityS3ReadOnlyEC2: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: Udacity-S3-Read-Only
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'    
      Description: AWS managed policy for S3 read only access
      ManagedPolicyArns: 
        - Ref: S3ReadOnlyAccessARN

Outputs: 
  S3BucketARN:
    Description: Bucket ARN
    Value: !GetAtt S3Bucket.Arn
  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.

# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html
